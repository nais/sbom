name: 'Nais Sbom Generator'
description: 'Generate and output SBOM'
inputs:

  ecosystem:
    description: |-
      (Optional) action finds the actual build file in the repository but you can also specify a ecosystem to generate 
      sbom from. Several of ecosystems have different type of build systems, then specify key=value,
      for node e.g. node=npm and for python e.g. python=poetry etc. maven and gradle only supports wrappers. 
      If the application is depending on private repositories, please see 'bring your own sbom' alias 'byo-sbom'
    required: false

  image:
    description: |-
      image to sign and upload attestation, must be in the form of <image>:<tag>@<digest>
    required: true

  go-main-dir:
    description: |-
      go main directory for sbom generation
    required: false
    default: '.'

  context:
    description: |-
      current working directory for sbom generation, defaults to root of the repository
      useful in mono-repos or when the build file is not in the root of the repository
    required: false
    default: '.'

  sbom:
    description: |-
      filename of the SBOM file, defaults to bom.json
    required: false
    default: 'bom.json'

  with-dependencies:
    description: |-
      generate ecosystem sbom, defaults to true
    default: 'true'

outputs:
  sbom-path:
    description: 'generated sbom path'
    value: ${{ steps.outputs.outputs.sbom-path }}

runs:
  using: composite
  steps:

    - name: Set current context
      run: |
        echo CONTEXT=${{ inputs.context }} >> $GITHUB_ENV
      shell: bash

    - name: Identify ecosystem
      if: ${{ inputs.with-dependencies == 'true' && inputs.byo-sbom == '' && inputs.ecosystem == '' }}
      run: |
        if [[ "$(find ${{ env.CONTEXT }} -type f -name 'package-lock.json')" ]]; then
         echo ECOSYSTEM="node=npm" >> $GITHUB_ENV
        elif [[ "$(find ${{ env.CONTEXT }} -type f -name 'build.gradle*')" ]]; then
         echo ECOSYSTEM=gradle >> $GITHUB_ENV
        elif [[ "$(find ${{ env.CONTEXT }} -type f -name 'pom.xml')" ]]; then
         echo ECOSYSTEM=maven >> $GITHUB_ENV
        elif [[ "$(find ${{ env.CONTEXT }} -type f -name 'go.mod')" ]]; then
         echo ECOSYSTEM=go >> $GITHUB_ENV
        elif [[ "$(find ${{ env.CONTEXT }} -type f -name 'poetry.lock')" ]]; then
         echo ECOSYSTEM="python=poetry" >> $GITHUB_ENV
        elif [[ "$(find ${{ env.CONTEXT }} -type f -name 'Pipfile.lock')" ]]; then
         echo ECOSYSTEM="python=pip" >> $GITHUB_ENV
        elif [[ "$(find ${{ env.CONTEXT }} -type f -name 'requirements.txt')" ]]; then
          echo ECOSYSTEM="python=pip" >> $GITHUB_ENV
        else
         echo "No supported build file found in the repository"
         echo "Action will try to generate sbom from the image with trivy"
        fi
      shell: bash

    - name: Use trivy to generate sbom
      if: ${{ inputs.byo-sbom == '' && inputs.ecosystem == '' }}
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: "image"
        format: "cyclonedx"
        output: "${{ env.CONTEXT }}/${{ inputs.sbom }}"
        image-ref: "${{ env.IMAGE }}"

    - name: Install Go
      if: ${{ inputs.ecosystem == 'go' }}
      uses: actions/setup-go@v3
      with:
        go-version: '1.20.1'

    - name: Install cyclonedx-gomod and generate sbom
      if: ${{ inputs.byo-sbom == '' && inputs.ecosystem == 'go' }}
      shell: bash
      run: |
        go install github.com/CycloneDX/cyclonedx-gomod/cmd/cyclonedx-gomod@latest
        echo "Installed cyclonedx-gomod"
        cd $CONTEXT
        cyclonedx-gomod app -output ./${{ inputs.sbom }} -main ${{ inputs.go-main-dir }} -json=true
        echo "Generated Go ${{ inputs.sbom }}"

    - name: Maven CycloneDX sbom
      if: ${{ inputs.byo-sbom == '' && inputs.ecosystem == 'maven' }}
      shell: bash
      run: |
        cd $CONTEXT
        if [[ ! -f mvnw ]]; then
          echo "maven wrapper not found, please add it to the repository"
          exit 1
        fi
        
        ./mvnw org.cyclonedx:cyclonedx-maven-plugin:2.7.5:makeAggregateBom -DoutputFormat=json -DoutputName=bom && \
        echo "SBOM=target/${{ inputs.sbom }}" >> $GITHUB_ENV && echo "Generated Maven ${{ inputs.sbom }}"

    - name: Gradle cycloneDX sbom
      if: ${{ inputs.byo-sbom == '' && inputs.ecosystem == 'gradle' }}
      shell: bash
      run: |
        cd $CONTEXT      
        if [[ ! -f gradlew ]]; then
          echo "gradle wrapper not found, please add it to the repository"
          exit 1
        fi
        
        ./gradlew cyclonedxBom && \
        echo "SBOM=build/reports/${{ inputs.sbom }}" >> $GITHUB_ENV && echo "Generated Gradle ${{ inputs.sbom }}"

    - name: Npm CycloneDX sbom
      if: ${{ inputs.byo-sbom == '' && contains(inputs.ecosystem, 'node') }}
      shell: bash
      run: |
        eco="${{ inputs.ecosystem }}"
        build_type="${eco##*=}"
        if [[ "$build_type" == '' ||  "$build_type" != 'npm' ]]; then
          echo "a project build type is required for node ecosystem"
          echo "accepted values are npm"
          echo "yarn is not supported at the moment"
          exit 1
        fi
        cd $CONTEXT
        npx @cyclonedx/cyclonedx-npm --output-file ${{ inputs.sbom }}
        echo "Generated ${{ inputs.ecosystem }} ${{ inputs.sbom }}"

    - name: Python CycloneDX sbom
      if: ${{ inputs.byo-sbom == '' && contains(inputs.ecosystem, 'python') }}
      shell: bash
      run: |
        # greedy front trim matches everything up to and including the last colon
        eco="${{ inputs.ecosystem }}"
        build_type="${eco##*=}"
        if [[ "$build_type" == '' ||  "$build_type" != 'poetry' && "$build_type" != 'pip' && "$build_type" != 'conda-json' && "$build_type" != 'requirements' ]]; then
          echo "a project build type is required for python ecosystem"
          echo "accepted values are pip, poetry, conda-json and requirements"
          exit 1
        fi
        cd $CONTEXT
        pip install cyclonedx-bom
        cyclonedx-py --"$build_type" -o ${{ inputs.sbom }} --format json
        echo "Generated ${{ inputs.ecosystem }} ${{ inputs.sbom }}"

    - name: Set outputs
      id: outputs
      shell: bash
      run: |
        echo "sbom-path=${{ env.CONTEXT }}/${{ inputs.sbom }}" >> $GITHUB_OUTPUT